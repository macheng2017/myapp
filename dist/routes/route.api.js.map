{"version":3,"sources":["../../src/routes/route.api.js"],"names":["express","require","PostModel","bcrypt","UserModel","config","router","Router","post","req","res","next","title","body","content","authorId","locals","currentUser","_id","save","err","doc","json","success","posts","get","find","postsList","id","params","findById","patch","findOneAndUpdate","name","pass","rePass","Error","user","hashSync","end","findOne","isOk","compareSync","authToken","opts","path","maxAge","signed","httpOnly","cookie","cookieName","module","exports"],"mappings":"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","file":"route.api.js","sourcesContent":["var express = require('express');\r\n//import the schema files of mongodb\r\nvar PostModel = require('../models/post');\r\n\r\nvar bcrypt = require('bcrypt');\r\nvar UserModel = require('../models/user');\r\nvar config = require('../config');\r\n/*  */\r\nvar router = express.Router();\r\n\r\n/* POST posts save the article details  */\r\nrouter.post(\"/posts\", (req, res, next) => {\r\n  var title = req.body.title;\r\n  var content = req.body.content;\r\n  //res.send({title,content})//\r\n\r\n\r\n  //save those data to the database of mongodb\r\n  var post = new PostModel();\r\n  post.title = title;\r\n  post.content = content;\r\n  post.authorId = res.locals.currentUser._id;\r\n  post.save(function (err, doc) {\r\n    if (err) {\r\n      next(err);\r\n    } else {\r\n      // save operate require return the saved data to client,  because follow operate require the data id.\r\n      res.json({\r\n        success: true,\r\n        posts: doc\r\n      });\r\n    }\r\n  });\r\n});\r\n/* GET posts article lists  */\r\nrouter.get('/posts', (req, res, next) => {\r\n  PostModel.find({}, {}, (err, posts) => {\r\n    if (err) {\r\n      /*   res.json({success:false}); */\r\n      next(err); /* use app.js error-handling */\r\n      return;\r\n    }\r\n    res.json({\r\n      success: true,\r\n      postsList: posts\r\n    });\r\n  });\r\n});\r\n/* GET one post get the single article by id */\r\nrouter.get('/posts/:id', (req, res, next) => {\r\n\r\n  //var id  = req.query.id;\r\n  var id = req.params.id;\r\n\r\n  PostModel.findById(id, (err, post) => {\r\n    if (err) {\r\n      /* res.json({success:false}) */\r\n      next(err); /* use app.js error-handling */\r\n      return;\r\n    }\r\n    res.json({\r\n      success: true,post\r\n    });\r\n  });\r\n});\r\n/* PATCH edit post  edit article */\r\nrouter.patch('/posts/:id', (req, res, next) => {\r\n  // var id = req.body.id;\r\n  var id = req.params.id;\r\n  var title = req.body.title;\r\n  var content = req.body.content;\r\n\r\n  PostModel.findOneAndUpdate({\r\n    _id: id\r\n  }, {\r\n    title,\r\n    content\r\n  }, (err) => {\r\n    if (err) {\r\n      /*   res.json({success:false}); */\r\n      next(err); /* use app.js error-handling */\r\n    } else {\r\n      res.json({\r\n        success: true\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n/* \r\n  POST signup user\r\n*/\r\nrouter.post('/signup', (req, res, next) => {\r\n    var name = req.body.name;\r\n    var pass =req.body.pass;\r\n    var rePass = req.body.rePass;\r\n    if(pass !== rePass){\r\n        return next(new Error('两次输入的密码不对!'));\r\n    }\r\nvar user = new UserModel();\r\nuser.name =name;\r\nuser.pass = bcrypt.hashSync(pass,10);\r\nuser.save((err)=>{\r\n  if(err){\r\n    next(err);\r\n  }else{\r\n    res.end();\r\n  }\r\n});\r\n\r\n});\r\n\r\n/* POST signin user */\r\nrouter.post(\"/signin\",(req,res,next)=>{\r\n  var name = req.body.name || '';\r\n  var pass = req.body.pass || '';\r\n\r\nUserModel.findOne({name},(err,user)=>{\r\n  if(err||!user){\r\n    return next(new Error(\"用户不存在\"));\r\n  }else{\r\n    var isOk = bcrypt.compareSync(pass,user.pass);\r\n    if(!isOk){\r\n        return next(new Error(\"密码不对\"));\r\n    }\r\n    // why this is _id ?\r\n    var authToken = user._id;\r\n    //组装一个cookie  Constructs a cookie with a specified name and value\r\n    var opts ={\r\n        path:'/',\r\n        maxAge:1000*60*60*24*30,//cookie 有效期30天\r\n        signed:true,\r\n        httpOnly:true\r\n    };\r\n    res.cookie(config.cookieName,authToken,opts);\r\n    res.end();\r\n  }\r\n  });\r\n});\r\nmodule.exports = router;"]}