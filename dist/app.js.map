{"version":3,"sources":["../src/app.js"],"names":["require","express","path","favicon","logger","cookieParser","bodyParser","connectMongodb","session","config","auth","expressLayouts","api","page","MongoStore","app","set","join","__dirname","use","json","urlencoded","extended","cookieName","static","secret","sessionSecret","store","url","mongodbUrl","resave","saveUninitialized","authUser","req","res","next","err","Error","status","locals","message","error","get","format","send","toString","html","render","default","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["require('./models/init') //在初始化app.js文件开头就链接数据库\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar favicon = require('serve-favicon');\r\nvar logger = require('morgan');\r\nvar cookieParser = require('cookie-parser');\r\nvar bodyParser = require('body-parser');\r\n/* about session */\r\nvar connectMongodb = require('connect-mongo');\r\nvar session = require('express-session');\r\n/* import config.js file about cookie setup */\r\nvar config = require('./config');\r\n/* 验证用户信息 */\r\nvar auth = require(\"./middlewares/auth\");\r\n/* draw out  ejs public module*/\r\nvar expressLayouts = require('express-ejs-layouts');\r\n\r\n\r\n// var index = require('./routes/index');\r\n// var users = require('./routes/users');\r\n//引入router 将route 分成两类 处理page的 还有处理数据的api\r\nvar api = require('./routes/route.api');\r\nvar page = require('./routes/route.page');\r\n/* set and use session */\r\nvar MongoStore = new connectMongodb(session);\r\nvar app = express();\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'ejs');\r\n/* use express-ejs-layouts */\r\napp.use(expressLayouts);\r\n// uncomment after placing your favicon in /public\r\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\r\napp.use(logger('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n/* modify */\r\napp.use(cookieParser(config.cookieName));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n/* use session middleware */\r\napp.use(\r\n  session({\r\n    secret: config.sessionSecret,\r\n    store: new MongoStore({\r\n      url:config.mongodbUrl\r\n    }),\r\n    resave:true,\r\n    saveUninitialized: true\r\n  })\r\n);\r\n\r\n/* 验证用户信息 */\r\napp.use(auth.authUser);\r\napp.use('/', page);\r\napp.use('/api/v1',api);\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  var err = new Error('Not Found');\r\n  err.status = 404;\r\n  next(err);\r\n});\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n\r\n  res.format({\r\n    json(){\r\n      res.send({error:err.toString()});\r\n    },\r\n    html(){\r\n      res.render(\"error\");\r\n    },\r\n    default(){\r\n      const message = '${errorDetails}';\r\n      res.send('500 Internal server error:\\n${err.toString()}');\r\n    }\r\n  });\r\n});\r\nmodule.exports = app;\r\n"]}